/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import javax.swing.*;
import java.awt.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import OBJECTS.Clock;
import OBJECTS.Scheduler;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 *
 * @author cristiandresgp
 */
public class Simulacion extends javax.swing.JFrame {
    private Clock clock;
    private Scheduler scheduler;
    private boolean running = true; // Control del hilo de actualización

    /**
     * Constructor
     */
    public Simulacion() {      
        initComponents();
        clock = new Clock();
        scheduler = new Scheduler("FCFS", 5); // Iniciar con política predeterminada
        customInit();  // Inicializa los elementos visuales
        clock.startClock(); // Inicia el reloj una vez que la interfaz está lista

        // Hilo para actualizar el ciclo de reloj en la interfaz
        new Thread(() -> {
            while (running) {
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
                SwingUtilities.invokeLater(() -> 
                    clockLabel.setText("CICLO DE RELOJ GLOBAL: " + clock.getCurrentCycle())
                );
            }
        }).start();
    }
    
    /**
     * Inicializa los elementos personalizados
     */
    private void customInit() {
        tickDurationSpinner.setModel(new SpinnerNumberModel(1000, 100, 5000, 100));
        // Evitar que el usuario edite el valor manualmente
        JComponent editor = tickDurationSpinner.getEditor();
        JFormattedTextField textField = ((JSpinner.DefaultEditor) editor).getTextField();
        textField.setEditable(false); // Desactiva edición de teclado
        textField.setBackground(Color.WHITE); // Mantiene el fondo normal
        textField.setFocusable(false);
        tickDurationSpinner.setFocusable(false);
        
        tickDurationSpinner.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                int newDuration = (int) tickDurationSpinner.getValue();
                clock.setTickDuration(newDuration);
            }
        });
        
        // Configurar el JComboBox de política de planificación
        politicaPlanificacion.setModel(new DefaultComboBoxModel<>(new String[]{"FCFS", "SJF", "Round Robin", "SRT", "HRRN"}));
        politicaPlanificacion.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedPolicy = (String) politicaPlanificacion.getSelectedItem();
                scheduler.setAlgorithm(selectedPolicy);
                System.out.println("Política de planificación cambiada a: " + selectedPolicy);
            }
        });
    }

    /**
     * Método para detener el hilo antes de cerrar la ventana
     */
    @Override
    public void dispose() {
        running = false; // Detener el hilo de actualización
        super.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        politicaPlanificacion = new javax.swing.JComboBox<>();
        clockLabel = new javax.swing.JLabel();
        tickDurationSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("SIMULACIÓN");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, -1, -1));

        jLabel2.setText("COLA DE BLOQUEADOS");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, -1, -1));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 450, -1));

        jLabel3.setText("POLÍTICA DE PLANIFICACION ACTUAL: ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 410, -1, -1));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 450, -1));

        jLabel4.setText("COLA DE LISTOS");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));

        politicaPlanificacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        politicaPlanificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                politicaPlanificacionActionPerformed(evt);
            }
        });
        jPanel1.add(politicaPlanificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 410, 170, -1));

        clockLabel.setText("CICLO DE RELOJ GLOBAL:");
        jPanel1.add(clockLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 50, -1, -1));
        jPanel1.add(tickDurationSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 70, -1, -1));

        jLabel5.setText("(duración en ms)");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 80, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void politicaPlanificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_politicaPlanificacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_politicaPlanificacionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clockLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JComboBox<String> politicaPlanificacion;
    private javax.swing.JSpinner tickDurationSpinner;
    // End of variables declaration//GEN-END:variables
}
